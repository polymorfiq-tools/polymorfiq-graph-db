name: test

on:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test_rust:
    runs-on: ubuntu-latest
    env:
      working-directory: ./lib
    steps:
    - uses: actions/checkout@v2

    - name: Test Rust Lib
      working-directory: ${{env.working-directory}}
      run: cargo test
    
    - name: Test Rust Lib (with dynamic allocation)
      working-directory: ${{env.working-directory}}
      run: cargo test --features alloc

  build_wasm:
    needs: test_rust
    runs-on: ubuntu-latest
    env:
      working-directory: ./wasm
      wasm-file: wasm/target/wasm32-unknown-unknown/release/wasm.wasm
      orig-wasm-file: wasm/target/wasm32-unknown-unknown/release/wasm-orig.wasm
      orig-alloc-file: wasm/target/wasm32-unknown-unknown/release/wasm-alloc-orig.wasm
      alloc-file: wasm/target/wasm32-unknown-unknown/release/wasm-alloc.wasm
    steps:
    - uses: actions/checkout@v2
    - run: rustup +nightly target add wasm32-unknown-unknown
    - name: Build (no_alloc)
      working-directory: ${{env.working-directory}}
      env:
        WASM_FILE: ${{env.wasm-file}}
        ORIG_WASM_FILE: ${{env.orig-wasm-file}}
      run: |
        cargo build --release --target wasm32-unknown-unknown --verbose;
        mv ../$WASM_FILE ../$ORIG_WASM_FILE;
    - name: Build (alloc)
      working-directory: ${{env.working-directory}}
      env:
        ALLOC_FILE: ${{env.alloc-file}}
        ORIG_ALLOC_FILE: ${{env.orig-alloc-file}}
      run: |
        cargo build --release --target wasm32-unknown-unknown --features alloc --verbose;
        mv ../$WASM_FILE ../$ORIG_ALLOC_FILE;
    - name: Get Binaryen (wasm-opt)
      run: |
        wget https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz
        tar -xvzf binaryen-version_110-x86_64-linux.tar.gz
    - name: Optimize
      env:
        WASM_FILE: ${{env.wasm-file}}
        ORIG_WASM_FILE: ${{env.orig-wasm-file}}
        ALLOC_FILE: ${{env.alloc-file}}
        ORIG_ALLOC_FILE: ${{env.orig-alloc-file}}
      run: |
        ./binaryen-version_110/bin/wasm-opt $ORIG_WASM_FILE -o $WASM_FILE --strip-debug -Oz;
        ./binaryen-version_110/bin/wasm-opt $ORIG_ALLOC_FILE -o $ALLOC_FILE --strip-debug -Oz;

    - uses: actions/upload-artifact@master
      with:
        name: core-wasm
        path: |
          ${{env.wasm-file}}
          ${{env.orig-wasm-file}}
          ${{env.alloc-file}}
          ${{env.orig-alloc-file}}

  generate_wat:
    needs: build_wasm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install wat-wasm
        run: npm install wat-wasm -g
      - uses: actions/download-artifact@master
        with:
          name: core-wasm
          path: wasm
      - name: Commit report
        run: |
          git config --global user.name 'Automated WAT-WASM';
          git config --global user.email 'automated-wasm@users.noreply.github.com';
          
          cp wasm/wasm.wasm bin/build.wasm;
          git add bin/build-no_alloc.wasm;
          
          cp wasm/wasm-alloc.wasm bin/build-alloc.wasm;
          git add bin/build-alloc.wasm;

          wat-wasm wasm/wasm-orig.wasm -o bin/build-no_alloc.wat;
          wat-wasm wasm/wasm-alloc-orig.wasm -o bin/build-alloc.wat;
          git add bin/build-no_alloc.wat;
          git add bin/build-alloc.wat;

          git diff-index --quiet HEAD || git commit -m "Automated wat-wasm";
          git push;
        